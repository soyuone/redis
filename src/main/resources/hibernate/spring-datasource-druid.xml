<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.2.xsd  
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
    http://www.springframework.org/schema/task  
    http://www.springframework.org/schema/task/spring-task-4.2.xsd 
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<!-- Druid数据库连接池，http://www.open-open.com/lib/view/open1430558786084.html 
		http://www.cnblogs.com/wuyun-blog/p/5679073.html -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、username、password，https://www.oschina.net/question/873438_234580 -->
		<property name="url" value="${druid.url}" />
		<property name="username" value="${druid.username}" />
		<property name="password" value="${druid.password}" />
		<!-- 提示Druid数据源需要对数据库密码进行解密，https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter -->
		<property name="connectionProperties"
			value="config.decrypt=${druid.decrypt};config.decrypt.key=${druid.publickey}" />

		<!-- 初始化连接池连接值、连接池中连接最大值、连接池中连接最小值 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<!-- 获取连接时等待最大等待时间（毫秒） -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 1、检测需要关闭的空闲连接的间隔时间（毫秒）.2、testWhileIdle的判断依据. 默认值：60 * 1000L -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 一个连接在池中的最小生存时间（毫秒），默认值：1000L * 60L * 30L -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

		<!-- 连接有效性测试 -->
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />

		<!-- 是否强制关闭长时间不使用的连接 -->
		<property name="removeAbandoned" value="${druid.removeAbandoned}" />
		<!-- 超过*秒关闭空闲连接 -->
		<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
		<!-- 将当前关闭动作记录到日志 -->
		<property name="logAbandoned" value="${druid.logAbandoned}" />

		<!-- 是否缓存preparedStatement（PSCache），默认值：false；指定每个连接上的PSCache的大小，默认值：10 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 监控统计拦截的filters，去掉后监控界面SQL无法统计，https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter 
			http://www.cnblogs.com/ansn001/p/4571606.html -->
		<property name="filters" value="${druid.filters}" />
		<!-- 同时配置filters、proxyFilters时，它们是组合关系并非替换关系 -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>

	<!-- Druid内置提供一个StatFilter，用于统计监控信息 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- slowSqlMillis属性用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢，默认值：3000毫秒 -->
		<property name="slowSqlMillis" value="10000" />
		<!-- 通过日志输出执行慢的SQL，默认值：false -->
		<property name="logSlowSql" value="true" />
		<!-- StatFilter提供SQL统计合并的功能，默认值：false -->
		<property name="mergeSql" value="true" />
	</bean>

	<!-- 输出SQL至日志 -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<!-- 是否输出可执行语句，默认值：false -->
		<property name="statementExecutableSqlLogEnable" value="false" />
	</bean>

	<!-- SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocation" value="classpath:hibernate/hibernate.cfg.xml"/> -->
		<property name="packagesToScan">
			<list>
				<value>com.song.redis</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- 开启二级缓存的统计功能 -->
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<!-- 对数据库进行批量删除，批量更新和批量插入时的批次大小(相当于设置Buffer缓冲区大小，值越大则批量操作向数据库发送sql的次数越少，执行速度就越快) -->
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<!-- 开启二级缓存，默认关闭 -->
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<!-- 设置使用结构化方式来维护缓存项 -->
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
				<!-- 设置二级缓存区的实现类 -->
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<!-- ehcache.xml文件存放位置，http://blog.csdn.net/fengshizty/article/details/43603611 -->
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}
				</prop>
			</props>
		</property>
	</bean>

	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类，该类是PlatformTransactionManager接口针对采用Hibernate的特定实现类 -->
	<!-- 配置HibernateTransactionManager需要注入sessionFactory -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务管理器，使用jdbc事务，http://www.cnblogs.com/xusir/p/3650522.html -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" /> </bean> -->

	<!-- 使用@Transactional注解标注方式开启事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Druid和Spring关联监控配置，方法名正则匹配拦截配置，https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_Druid%E5%92%8CSpring%E5%85%B3%E8%81%94%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.song.redis.service.impl.*ServiceImpl</value>
			</list>
		</property>
	</bean>

	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>
</beans>